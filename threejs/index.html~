<head>
<!-- Everything from http://threejs.org/examples/webgl_loader_stl.html -->
<script src="three.min.js"></script>
<script src="Detector.js"></script>
<script src="TrackballControls.js"></script>
<script src="OrbitControls.js"></script>
</head>

<body style="margin:0;padding:0">

<script>
			if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

			var container;

			var camera, cameraTarget, scene, renderer;
                        var windowHalfX = 0;
                        var windowHalfY = 0;

			init();
			animate();

			function init() {

				container = document.createElement( 'div' );
				document.body.appendChild( container );

				camera = new THREE.PerspectiveCamera( 40, window.innerWidth / window.innerHeight, 1e-1, 1e4 );
				camera.position.set( 0.1, 1, 0.8 );
				cameraTarget = new THREE.Vector3( 0,0,0 );

				scene = new THREE.Scene();
				scene.fog = new THREE.Fog( 0x000000, 20, 20 );

				// ASCII file

				
				var path = "pisa/";
				var format = '.png';
				var urls = [
					path + 'px' + format, path + 'nx' + format,
					path + 'py' + format, path + 'ny' + format,
					path + 'pz' + format, path + 'nz' + format
				];

				var textureCube = THREE.ImageUtils.loadTextureCube( urls );
				
				var loader = new THREE.JSONLoader();

				loader.load( './4-5.json', function(geometry){
					var material = new THREE.MeshPhongMaterial( {
						color: 0x000000,
						specular:0xffffff,
						combine: THREE.MultiplyOperation,
						shininess: 5,
						shading: THREE.SmoothShading,
						reflectivity: 1,
						envMap: textureCube,
						
					} )

					var mesh = new THREE.Mesh( geometry, material );
	
					mesh.position.set( 0, 0, 0 );
					mesh.scale.set( 40, 40, 40 );
					mesh.castShadow = true;
					mesh.receiveShadow = true;
					scene.add( mesh );
				} );

				var loaderInlay = new THREE.JSONLoader();
				loaderInlay.load( './4-5-inlay.json' , function ( geometry ) {

					var material = new THREE.MeshPhongMaterial( {
						color: new THREE.Color( 0x000000 ),
						specular:new THREE.Color( 0x000000 ),
						shininess: 30,
						shading: THREE.SmoothShading,
						reflectivity: 1
					} )

					var mesh = new THREE.Mesh( geometry, material );
	
					mesh.position.set( 0, 0, 0 );
					mesh.scale.set( 40, 40, 40 );
					scene.add( mesh );
				} );

				var loaderInlay = new THREE.JSONLoader();
				loaderInlay.load( './4-5-inlay.json' , function ( geometry ) {

					var material = new THREE.MeshPhongMaterial( {
						color: new THREE.Color( 0xffffff ),
						specular:new THREE.Color( 0xffffff ),
						shininess: 10,
						shading: THREE.SmoothShading,
						reflectivity: 1
					} )

					var mesh = new THREE.Mesh( geometry, material );
	
					mesh.position.set( 0, 0, 0 );
					mesh.scale.set( 40, 40, 40 );
					mesh.rotation.set( 3.142, 0, 0 );
					scene.add( mesh );
				} );


				// Lights
				addShadowedLight( -.2, 0, 0, 0xffffff, 3.35 );
				addShadowedLight( 1, 1, 1, 0xffffff, 2.35 );
				addShadowedLight( 0.5, 1, 0.1, 0xffffff, 2 );

				// renderer

				renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setSize( window.innerWidth, window.innerHeight );

				renderer.setClearColor( scene.fog.color, 1 );
				renderer.setClearColorHex( 0xffffff, 1 );

				renderer.gammaInput = true;
				renderer.gammaOutput = true;

				renderer.shadowMapEnabled = true;
				renderer.shadowMapCullFace = THREE.CullFaceBack;

				container.appendChild( renderer.domElement );

				window.addEventListener( 'resize', onWindowResize, false );

				controls = new THREE.OrbitControls( camera );
				controls.damping = 0.2;
				controls.addEventListener( 'change', render );

                       }

			function animate() {
				requestAnimationFrame( animate );
				controls.update();    
				render();
			}

			function render() {
				renderer.render( scene, camera );
			}


			function addShadowedLight( x, y, z, color, intensity ) {

				var directionalLight = new THREE.DirectionalLight( color, intensity );
				directionalLight.position.set( x, y, z )
				scene.add( directionalLight );

				directionalLight.castShadow = true;
				// directionalLight.shadowCameraVisible = true;

				var d = 1;
				directionalLight.shadowCameraLeft = -d;
				directionalLight.shadowCameraRight = d;
				directionalLight.shadowCameraTop = d;
				directionalLight.shadowCameraBottom = -d;

				directionalLight.shadowCameraNear = 1;
				directionalLight.shadowCameraFar = 4;

				directionalLight.shadowMapWidth = 1024;
				directionalLight.shadowMapHeight = 1024;

				directionalLight.shadowBias = -0.005;
				directionalLight.shadowDarkness = 0.25;

			}

			function onWindowResize() {

				windowHalfX = window.innerWidth / 2;
				windowHalfY = window.innerHeight / 2;

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

</script>

</body>
